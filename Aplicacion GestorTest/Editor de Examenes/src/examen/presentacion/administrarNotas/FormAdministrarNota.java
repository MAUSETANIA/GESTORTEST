/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ArbolDirectorio.java
 *
 * Created on 28-mar-2010, 14:45:44
 */
package examen.presentacion.administrarNotas;

import examen.negocio.AdministradorDeNotas;
import examen.negocio.Examen;
//import examen.pdf.ExamenPDF;
import examen.persistencia.ArchivoXML;
import java.awt.Cursor;
import java.io.File;
import java.io.FileFilter;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

/**
 *
 * @author cassa11
 */
public class FormAdministrarNota extends javax.swing.JFrame {

    final int ICON_SIZE = 32;
    DefaultListModel mdlFiles = new DefaultListModel();
    DefaultMutableTreeNode top;
    public static AdministradorDeNotas adn= new AdministradorDeNotas();
    public static int selectedListaArchivo=-1;

    /** Creates new form ArbolDirectorio */
    public FormAdministrarNota(String s1) {
        //s1 = s1 + ":/RESPUESTAS";
        File f = new File(s1); // ACA DALE LO QUE VOS QUERAS
        f.mkdir();
        top = new DefaultMutableTreeNode(f);
        populateNode(top, f);
        initComponents();
        setLocationRelativeTo(null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        treeDir = new javax.swing.JTree(top);
        jScrollPane2 = new javax.swing.JScrollPane();
        lstFiles = new javax.swing.JList(mdlFiles);
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        treeDir.setBorder(javax.swing.BorderFactory.createCompoundBorder(null, javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));
        treeDir.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        treeDir.setForeground(new java.awt.Color(102, 153, 0));
        treeDir.setAutoscrolls(true);
        treeDir.setCellRenderer(new DirectoryRenderer(ICON_SIZE));
        treeDir.addTreeExpansionListener(new javax.swing.event.TreeExpansionListener() {
            public void treeCollapsed(javax.swing.event.TreeExpansionEvent evt) {
            }
            public void treeExpanded(javax.swing.event.TreeExpansionEvent evt) {
                treeDirTreeExpanded(evt);
            }
        });
        treeDir.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                treeDirValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(treeDir);

        lstFiles.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(102, 0, 255)));
        lstFiles.setForeground(new java.awt.Color(51, 153, 0));
        lstFiles.setCellRenderer(new FileRenderer(ICON_SIZE));
        lstFiles.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstFilesValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(lstFiles);

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 255));
        jLabel1.setText("Directorio:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 255));
        jLabel2.setText("Examenes:");

        jMenu1.setText("Menu");

        jMenuItem2.setText("Salir");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Options");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void treeDirValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_treeDirValueChanged
        // TODO add your handling code here:
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) treeDir.getLastSelectedPathComponent();
        if (node == null) {
            return;
        }
        File f = (File) node.getUserObject();
        File[] files = f.listFiles(new FileFilter() {
            public boolean accept(File pathname) {
                return pathname.isFile();
            }
        });
        adn.clearExamenes();
        mdlFiles.removeAllElements();
        mdlFiles.removeAllElements();
        if (files != null) {
            for (int i = 0; i < files.length; i++) {                
                if(extencion(files[i].getName()).equals(".resp")){
                    mdlFiles.addElement(files[i]);
                    adn.AdicionarExamen(ArchivoXML.abrirXML(files[i].getPath()));
                }
            }
        }

     System.out.println(adn.getExamenes().size());
    }//GEN-LAST:event_treeDirValueChanged

    public String extencion(String nombreArchivo){
        if(nombreArchivo.length()<6){
            return "";
        }
        return nombreArchivo.substring(nombreArchivo.length()-5,nombreArchivo.length());
    }

    private void treeDirTreeExpanded(javax.swing.event.TreeExpansionEvent evt) {//GEN-FIRST:event_treeDirTreeExpanded
        // TODO add your handling code here:
        TreePath path = evt.getPath();
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) path.getLastPathComponent();
        if (node == null) {
            return;
        }
        setCursor(new Cursor(Cursor.WAIT_CURSOR));
        File f = (File) node.getUserObject();
        populateNode(node, f);
        JTree tree = (JTree) evt.getSource();
        DefaultTreeModel model = (DefaultTreeModel) tree.getModel();
        model.nodeStructureChanged(node);
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_treeDirTreeExpanded

    private void lstFilesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstFilesValueChanged
        // TODO add your handling code here:
        selectedListaArchivo= lstFiles.getSelectedIndex();
      new FormNotaAlumno(this, true).setVisible(true);
    }//GEN-LAST:event_lstFilesValueChanged

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new FormAdministrarNota("c").setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList lstFiles;
    private javax.swing.JTree treeDir;
    // End of variables declaration//GEN-END:variables

    private boolean populateNode(DefaultMutableTreeNode node, File f) {
        node.removeAllChildren();
        return populateNode(node, f, 2);
    }

    private boolean populateNode(DefaultMutableTreeNode node, File f, int depth) {
        File[] files = f.listFiles(new FileFilter() {

            public boolean accept(File pathname) {
                return pathname.isDirectory();
            }
        });
        if (files != null && depth > 0) {
            for (int i = 0; i < files.length; i++) {
                DefaultMutableTreeNode curr =
                        new DefaultMutableTreeNode(files[i]);
                populateNode(curr, files[i], depth - 1);
                node.add(curr);
            }
        }
        return true;
    }
}
